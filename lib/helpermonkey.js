var fs = require('fs')
	, hogan = require('hogan.js');

function denoteLast(collection, target)
{
	collection.forEach(function(item) {
		var itemTarget = item[target];
		if (! itemTarget || itemTarget.length == 0) return;
		itemTarget[itemTarget.length - 1].hm__last = true;
	});
}

var M = {
	version: '0.0.1',

	_templateCache: {},

	targets: {
			client: 'client'
		, server: 'server'
	},

	languages: {
			php: 'php'
		, csharp: 'csharp'
	},

	primitives: {
			char: 'char'
		, string: 'string'
		, short: 'short'
		, int: 'int'
		, long: 'long'
		, float: 'float'
		, double: 'double'
		, bool: 'bool'
	},

	_process: function(f, data) {
		if (typeof M._templateCache[f] == 'undefined') M._templateCache[f] = hogan.compile( fs.readFileSync(f).toString() );
		var template = M._templateCache[f];

		return template.render(data);
	},

	build: function(target, language, base, spec, cb) {
		if (typeof M.languages[ language ] == 'undefined') throw new Error('Invalid language specified.  Valid languages: ' + Object.keys(M.languages).join(', '));
		if (typeof M.targets[ target ] == 'undefined') throw new Error('Invalid target specified.  Valid targets: ' + Object.keys(M.targets).join(', '));
		if (!cb) cb = function(suggestedFilename, code, type, name){};

		if (typeof base != 'string') cb = spec, spec = base, base = 'base'; // default to the base.mustache base base basebase base

		var processor = require('./processors/' + target + 's/' + language + '.js')
			, objects = spec.objects
			, codeObjects = [];

		processor.preprocess(objects);

		denoteLast(objects, 'properties');

		objects.forEach(function(object) {
			denoteLast(object.methods, 'parameters');

			// add references to api_* properties to each object
			for (var k in spec)
			{
				if (k.substr(0, 4) == 'api_')
				{
					object[k] = spec[k];
				}
			}
		});

		spec.autogenerated = [
				'!!! This file was automatically generated.  If you edit this file, your changes may be overwritten. !!!'
			, 'This file was automatically generated using helpermonkey v' + M.version + ', which'
			, 'is available at https://github.com/cmawhorter/helpermonkey'
		];

		processor.build(spec, target, base, function(suggestedFilename, template, data, type, name) {
			var code = processor.postprocess( M._process(template, data) );
			cb(suggestedFilename, code, type, name)
			codeObjects.push(new Buffer(code));
		});

		return Buffer.concat(codeObjects).toString();
	}
};

module.exports = M;