var fs = require('fs')
	, hogan = require('hogan.js');

// function extend(target, source, prefix)
// {
// 	for (var k in source) 
// 	{ 
// 		var key = !!prefix ? prefix+k : k;
// 		target[key] = source[k];
// 	}
// }

function denoteLast(collection, target)
{
	collection.forEach(function(item) {
		var itemTarget = item[target];
		if (! itemTarget || itemTarget.length == 0) return;
		itemTarget[itemTarget.length - 1].hm__last = true;
	});
}

function HelperMonkey(apiSpec, options)
{
	this.version = '0.0.1';

	this.specification = apiSpec;
	this.options = options || {};

	this._templateCache = {},

	this.targets = {
			client: 'client'
		, server: 'server'
	};

	this.languages = {
			php: 'php'
		, csharp: 'csharp'
	};

	this.primitives = {
			char: 'char'
		, string: 'string'
		, short: 'short'
		, int: 'int'
		, long: 'long'
		, float: 'float'
		, double: 'double'
		, bool: 'bool'
	};
}

HelperMonkey.prototype._process = function(f, data) {
	if (typeof this._templateCache[f] == 'undefined') this._templateCache[f] = hogan.compile( fs.readFileSync(f).toString() );
	var template = this._templateCache[f];

	return template.render(data);
};

HelperMonkey.prototype.build = function(target, language, base, cb) {
	var self = this;
	
	if (typeof self.languages[ language ] == 'undefined') throw new Error('Invalid language specified.  Valid languages: ' + Object.keys(self.languages).join(', '));
	if (typeof self.targets[ target ] == 'undefined') throw new Error('Invalid target specified.  Valid targets: ' + Object.keys(self.targets).join(', '));
	if (!cb) cb = function(suggestedFilename, code, type, name){};

	if (typeof base != 'string') cb = base, base = 'base'; // default to the base.mustache base base basebase base

	var processor = require('./processors/' + target + 's/' + language + '.js')
		, objects = self.specification.objects
		, codeObjects = [];

	self.specification.options = self.options;

	processor.preprocess(objects);

	denoteLast(objects, 'properties');

	objects.forEach(function(object) {
		denoteLast(object.methods, 'parameters');

		objects.options = self.options;

		// add references to api_* properties to each object
		for (var k in self.specification)
		{
			if (k.substr(0, 4) == 'api_')
			{
				object[k] = self.specification[k];
			}
		}
	});

	self.specification.autogenerated = [
			'!!! This file was automatically generated.  If you edit this file, your changes may be overwritten. !!!'
		, 'This file was automatically generated using helpermonkey v' + self.version + ', which'
		, 'is available at https://github.com/cmawhorter/helpermonkey'
	];

	processor.build(self.specification, target, base, function(suggestedFilename, template, data, type, name) {
		var code = processor.postprocess( self._process(template, data) );
		cb(suggestedFilename, code, type, name);
		codeObjects.push(new Buffer(code));
	});

	return Buffer.concat(codeObjects).toString();
};

module.exports = HelperMonkey;