<?php

{{#autogenerated}}
// {{{.}}}
{{/autogenerated}}

use Guzzle\Http\Client;

abstract class {{{api_name}}}_BaseObject
{
	{{#api_auth}}
	{{#basic}}
	const BASICAUTH = 1;
	{{/basic}}
	{{#oauth}}
	const OAUTH = 2;
	{{/oauth}}

	{{/api_auth}}
	protected $data = array();

	protected $endpoint = null;
	{{#api_auth}}
	protected $authorization_method = null;
	{{/api_auth}}
	{{#api_auth}}
	{{#basic}}

	private $basicauth_username = null;
	private $basicauth_password = null;
	{{/basic}}
	{{#oauth}}

	private $oauth_key 					= null;
	private $oauth_secret 			= null;
	private $oauth_token 				= null;
	private $oauth_tokensecret 	= null;
	{{/oauth}}
	{{/api_auth}}

	public function __set ($name, $value)
	{
		$this->data[$name] = $value;
	}

	public function __get ($name)
	{
		if ( array_key_exists($name, $this->data) ) 
		{
			return $this->data[$name];
		}

		$trace = debug_backtrace();
		trigger_error('Undefined property via __get(): ' . $name .
				' in ' . $trace[0]['file'] .
				' on line ' . $trace[0]['line'],
			E_USER_NOTICE);
		
		return null;
	}

	public function endpoint ($url)
	{
		$this->endpoint = $url;
		return $this;
	}
	{{#api_auth}}
	{{#basic}}

	public function setBasicAuth (/* string */ $basicauth_username, /* string */ $basicauth_password)
	{
		$this->authorization_method = self::BASICAUTH;
		$this->basicauth_username = $basicauth_username;
		$this->basicauth_password = $basicauth_password;

		return $this;
	}
	{{/basic}}
	{{#oauth}}
	
	public function setOAuth (/* string */ $oauth_key, /* string */ $oauth_secret, /* string */ $oauth_token, /* string */ $oauth_tokensecret)
	{
		$this->authorization_method = self::OAUTH;
		$this->oauth_key 					= $oauth_key;
		$this->oauth_secret 			= $oauth_secret;
		$this->oauth_token 				= $oauth_token;
		$this->oauth_tokensecret 	= $oauth_tokensecret;

		return $this;
	}
	{{/oauth}}
	{{/api_auth}}

	protected function uri (/* string */ $method, /* string */ $mask, /* array */ $data)
	{
		if ($mask === null) return $this->object . '/' . $method; // no mask

		$search = array_map(function($k){ return ':'.$k; }, array_keys($data));
		$uri = str_replace($search, $data, $mask);
		return strlen($uri) == 0 ? '' : substr($uri, 1);
	}

	protected function client ()
	{
		$client = new Client($this->endpoint);
		$this->authorize($client);

		return $client;
	}

	protected function authorize (/* Client */ $client)
	{
		{{#api_auth}}
		{{#basic}}
		{{#oauth}}
		if ($this->authorization_method == self::BASICAUTH)
		{
			$this->authorize_basic($client);
		}
		else if ($this->authorization_method == self::OAUTH)
		{
			$this->authorize_oauth($client);
		}
		{{/oauth}}
		{{^oauth}}
		if ($this->authorization_method == self::BASICAUTH)
		{
			$this->authorize_basic($client);
		}
		{{/oauth}}
		{{/basic}}
		{{^basic}}
		{{#oauth}}
		if ($this->authorization_method == self::OAUTH)
		{
			$this->authorize_oauth($client);
		}
		{{/oauth}}
		{{/basic}}
		{{/api_auth}}
	}
	{{#api_auth}}{{#basic}}
	
	protected function authorize_basic (/* Client */ $client)
	{
		$authPlugin = new Guzzle\Plugin\CurlAuth\CurlAuthPlugin($this->basicauth_username, $this->basicauth_password);
		$client->addSubscriber($authPlugin);
	}
	{{/basic}}{{/api_auth}}
	{{#api_auth}}{{#oauth}}
	
	protected function authorize_oauth (/* Client */ $client)
	{
			$oauth = new Guzzle\Plugin\Oauth\OauthPlugin(array(
				'consumer_key'    => $this->oauth_key,
				'consumer_secret' => $this->oauth_secret,
				'token'           => $this->oauth_token,
				'token_secret'    => $this->oauth_tokensecret
			));
			$client->addSubscriber($oauth);
	}
	{{/oauth}}{{/api_auth}}

	protected function invalid_rest_method (/* string */ $rest, /* string */ $method)
	{
		$message = printf('%s::%s does not contain %s', $this->object, $method, $rest);
		throw new Exception($message);
	}

	protected function rest_generic (/* string */ $verb, /* string */ $method, /* string */ $mask, /* array */ $data)
	{
		if ( false === in_array($verb, array('post', 'get', 'put', 'delete')) ) $this->invalid_rest_method(strtoupper($verb), $method);

		$uri = $this->uri($method, $mask, $data);
		$client = $this->client();

		$response = $client->$verb($uri, null, $data)->send();
		$json = $response->json();

		return $json['data'];
	}

	protected function rest_post (/* string */ $method, /* string */ $mask, /* array */ $data) 
	{ 
		return $this->rest_generic('post', $method, $mask, $data);
	}

	protected function rest_get (/* string */ $method, /* string */ $mask, /* array */ $data) 
	{ 
		$uri = $this->uri($method, $mask, $data);
		$client = $this->client();

		$request = $client->get($uri, null, $data);
		$qs = $request->getQuery();

		if ( $data != null && count($data) > 0 )
		{
			foreach ($data as $k => $v)
			{
				$qs->set($k, $v);
			}
		}

		$response = $request->send();
		$json = $response->json();

		return $json['data'];
	}

	protected function rest_put (/* string */ $method, /* string */ $mask, /* array */ $data) 
	{ 
		return $this->rest_generic('put', $method, $mask, $data);
	}

	protected function rest_delete (/* string */ $method, /* string */ $mask, /* array */ $data) 
	{ 
		return $this->rest_generic('delete', $method, $mask, $data);
	}
}
