
{{#autogenerated}}
// {{{.}}}
{{/autogenerated}}

abstract class {{{api_name}}}_BaseObject
{
	protected $data = array();

	public static $endpoint = '{{{api_endpoint}}}';

	public function __set ($name, $value)
	{
		$this->data[$name] = $value;
	}

	public function __get ($name)
	{
		if ( array_key_exists($name, $this->data) ) 
		{
			return $this->data[$name];
		}

		$trace = debug_backtrace();
		trigger_error('Undefined property via __get(): ' . $name .
				' in ' . $trace[0]['file'] .
				' on line ' . $trace[0]['line'],
			E_USER_NOTICE);
		
		return null;
	}

	public function authorize ($client)
	{
		{{#api_auth}}
		{{#basic}}
		$authPlugin = new CurlAuthPlugin('{{{username}}}', '{{{password}}}');
		$client->addSubscriber($authPlugin);
		{{/basic}}
		{{#oauth}}
		$oauth = new OauthPlugin(array(
			'consumer_key'    => '{{{key}}}',
			'consumer_secret' => '{{{secret}}}',
			'token'           => '{{{token}}}',
			'token_secret'    => '{{{token_secret}}}'
		));
		$client->addSubscriber($oauth);
		{{/oauth}}
		{{/api_auth}}
	}

	private function invalid_rest_method ($rest, $method)
	{
		$message = printf('%s::%s does not contain %s', $this->object, $method, $rest);
		throw new Exception($message);
	}

	public function rest_post ($method, $data) { $this->invalid_rest_method('POST', $method); }
	public function rest_get ($method, $data) { $this->invalid_rest_method('GET', $method); }
	public function rest_put ($method, $data) { $this->invalid_rest_method('PUT', $method); }
	public function rest_delete ($method, $data) { $this->invalid_rest_method('DELETE', $method); }
}
